Sub T_HUD()
    Dim userInput As String
    Dim initialInput As String
    Dim ws As Worksheet
    Dim cell As Range
    Dim resoluteDict As Object
    Dim matchingCells As String
    Dim relatives As String
    Dim currentResolute As Integer
    
    ' Create a dictionary to map letters to their resolute values
    Set resoluteDict = CreateObject("Scripting.Dictionary")
    resoluteDict("A") = 1
    resoluteDict("J") = 1
    resoluteDict("S") = 1
    resoluteDict("B") = 2
    resoluteDict("K") = 2
    resoluteDict("T") = 2
    resoluteDict("C") = 3
    resoluteDict("L") = 3
    resoluteDict("U") = 3
    resoluteDict("D") = 4
    resoluteDict("M") = 4
    resoluteDict("V") = 4
    resoluteDict("E") = 5
    resoluteDict("N") = 5
    resoluteDict("W") = 5
    resoluteDict("F") = 6
    resoluteDict("O") = 6
    resoluteDict("X") = 6
    resoluteDict("G") = 7
    resoluteDict("P") = 7
    resoluteDict("Y") = 7
    resoluteDict("H") = 8
    resoluteDict("Q") = 8
    resoluteDict("Z") = 8
    resoluteDict("I") = 9
    resoluteDict("R") = 9
    
    'Change name of worksheet from default to custom name
    Sheets("Sheet1").Name = "PUCK"    

    ' Reference the worksheet containing your data
    Set ws = ThisWorkbook.Worksheets("PUCK")
    
    ' Continuously prompt the user for input
    Do
        ' Prompt the user for input
        userInput = InputBox("Enter a word or phrase (or press Cancel to exit):")
        
        ' Check if the user canceled
        If userInput = "" Then Exit Sub
        
        ' Extract the first character from the user input and convert it to uppercase
        initialInput = UCase(Left(userInput, 1))
        
        ' Check if the initial input exists in the resolute dictionary
        If resoluteDict.Exists(initialInput) Then
            ' Get the resolute value for the initial input
            currentResolute = resoluteDict(initialInput)
            
            ' Initialize the matchingCells and relatives strings for this entry
            matchingCells = ""
            relatives = ""
            
            ' Loop through the specified range (A3 to M24) and find matching cells for related initials
            For Each cell In ws.Range("A3:M24")
                ' Extract the first character from the cell value and convert it to uppercase
                Dim cellInitial As String
                cellInitial = UCase(Left(cell.Value, 1))
                
                ' Check if the cell's initial exists in the resolute dictionary and has the same resolute value
                If resoluteDict.Exists(cellInitial) And resoluteDict(cellInitial) = currentResolute Then
                    ' Append the cell content to the matchingCells string
                    matchingCells = matchingCells & "Cell Content: " & cell.Value & vbCrLf
                    
                    ' Check if the cell has a comment
                    If Not cell.Comment Is Nothing Then
                        ' Add the comment to the matchingCells string
                        matchingCells = matchingCells & "Comment: " & cell.Comment.Text & vbCrLf
                    End If
                    
                    ' Add this relative to the relatives string
                    relatives = relatives & cellInitial & ", "
                End If
            Next cell
            
            ' If no matching cell was found
            If Len(matchingCells) = 0 Then
                MsgBox "No matching entry found for " & initialInput
            Else
                ' Display all matching cells and comments in a single dialog box
                MsgBox "Matching Cells and Comments:" & vbCrLf & vbCrLf & matchingCells & _
                       "Relatives: " & Left(relatives, Len(relatives) - 2), vbInformation, "Results"
            End If
        Else
            MsgBox "Invalid input. Please enter a valid initial.", vbExclamation, "Invalid Input"
        End If
    Loop
End Sub

